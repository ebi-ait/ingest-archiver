from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional
from xsdata.models.datatype import XmlDateTime
from converter.ena.classes.sra_common import (
    AttributeType,
    LinkType,
    ObjectType,
    PlatformType,
    ProcessingType,
    RefObjectType,
    ReferenceSequenceType,
    SpotDescriptorType,
)


class FileReadType(Enum):
    SINGLE = "single"
    PAIRED = "paired"
    CELL_BARCODE = "cell_barcode"
    UMI_BARCODE = "umi_barcode"
    FEATURE_BARCODE = "feature_barcode"
    SAMPLE_BARCODE = "sample_barcode"
    VALUE = ""


class FileAsciiOffset(Enum):
    """
    :cvar VALUE: ASCII value 33.  Typically used for range 0..63.
    :cvar VALUE_1: ASCII value 64.  Typically used for range 0..60.
    """
    VALUE = "!"
    VALUE_1 = "@"


class FileChecksumMethod(Enum):
    """
    :cvar MD5: Checksum generated by the MD5 method (md5sum in unix).
    :cvar SHA_256: Checksum generated by the SHA-256 method .
    """
    MD5 = "MD5"
    SHA_256 = "SHA-256"


class FileFiletype(Enum):
    """
    :cvar SRA: Sequence Read Archives native format in serialized
        (single file) form.
    :cvar SRF: Standard Short Read Format file (.srf), all platforms
    :cvar SFF: 454 Standard Flowgram Format file (.sff)
    :cvar FASTQ: Combined nucleotide/qualities sequence file in .fastq
        form. Please see SRA File Formats Guide for definitions of the
        definition and restrictions on this form.
    :cvar FASTA: Please see SRA File Formats Guide for definitions of
        these file formats, and the SRA Submission Guidelines document
        for data series that are appropriate for your study. Sequence
        and qualities are minimally required.
    :cvar TAB: Tab delimited text file used to deliver certain auxiliary
        data along with sequencing submissions (only needed for certain
        use cases).   The first line is devoted to column headers.  Each
        column is dedicated to an INDSC data series type. Please see SRA
        File Formats Guide for definitions of the definition and
        restrictions on this form.
    :cvar VALUE_454_NATIVE: A combination of 454 primary analysis output
        files, including seq qual Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar VALUE_454_NATIVE_SEQ: 454 base calls (for example  .seq or
        .fna). Please see SRA File Formats Guide for definitions of
        these file formats, and the SRA Submission Guidelines document
        for data series that are appropriate for your study. Sequence
        and qualities are minimally required.
    :cvar VALUE_454_NATIVE_QUAL: 454 quality scores  (for example
        .qual). Please see SRA File Formats Guide for definitions of
        these file formats, and the SRA Submission Guidelines document
        for data series that are appropriate for your study. Sequence
        and qualities are minimally required.
    :cvar HELICOS_NATIVE: A kind of fastq format specific to the Helicos
        platform. Please see SRA File Formats Guide for definitions of
        these file formats, and the SRA Submission Guidelines document
        for data series that are appropriate for your study. Sequence
        and qualities are minimally required.
    :cvar ILLUMINA_NATIVE: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar ILLUMINA_NATIVE_SEQ: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar ILLUMINA_NATIVE_PRB: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar ILLUMINA_NATIVE_INT: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar ILLUMINA_NATIVE_QSEQ: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar ILLUMINA_NATIVE_SCARF: Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar SOLI_D_NATIVE: A combination of SOLiD  primary analysis output
        files, including: csfasta _QV.qual _intensity.ScaledCY3.fasta
        _intensity.ScaledCY5.fasta _intensity.ScaledFTC.fasta
        _intensity.ScaledTXR.fasta Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar SOLI_D_NATIVE_CSFASTA: Colorspace calls (for example .csfasta)
        Please see SRA File Formats Guide for definitions of these file
        formats, and the SRA Submission Guidelines document for data
        series that are appropriate for your study. Sequence and
        qualities are minimally required.
    :cvar SOLI_D_NATIVE_QUAL: Colorspace quality scores (for example
        .qual) Please see SRA File Formats Guide for definitions of
        these file formats, and the SRA Submission Guidelines document
        for data series that are appropriate for your study. Sequence
        and qualities are minimally required.
    :cvar PAC_BIO_HDF5: Pacific Biosciences Hierarchical Data Format.
        Please see SRA File Formats Guide for definitions of these file
        formats.
    :cvar BAM: Binary SAM format that combines alignment and sequencing
        data. Please see SRA File Formats Guide for definitions of these
        file formats, and the SRA Submission Guidelines document for
        data series that are appropriate for your study. Sequence and
        qualities are minimally required.
    :cvar CRAM: Binary CRAM format that combines alignment and
        sequencing data. Please see SRA File Formats Guide for
        definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar COMPLETE_GENOMICS_NATIVE: Please see SRA File Formats Guide
        for definitions of these file formats, and the SRA Submission
        Guidelines document for data series that are appropriate for
        your study. Sequence and qualities are minimally required.
    :cvar OXFORD_NANOPORE_NATIVE: Oxford Nanopore data format.
    """
    SRA = "sra"
    SRF = "srf"
    SFF = "sff"
    FASTQ = "fastq"
    FASTA = "fasta"
    TAB = "tab"
    VALUE_454_NATIVE = "454_native"
    VALUE_454_NATIVE_SEQ = "454_native_seq"
    VALUE_454_NATIVE_QUAL = "454_native_qual"
    HELICOS_NATIVE = "Helicos_native"
    ILLUMINA_NATIVE = "Illumina_native"
    ILLUMINA_NATIVE_SEQ = "Illumina_native_seq"
    ILLUMINA_NATIVE_PRB = "Illumina_native_prb"
    ILLUMINA_NATIVE_INT = "Illumina_native_int"
    ILLUMINA_NATIVE_QSEQ = "Illumina_native_qseq"
    ILLUMINA_NATIVE_SCARF = "Illumina_native_scarf"
    SOLI_D_NATIVE = "SOLiD_native"
    SOLI_D_NATIVE_CSFASTA = "SOLiD_native_csfasta"
    SOLI_D_NATIVE_QUAL = "SOLiD_native_qual"
    PAC_BIO_HDF5 = "PacBio_HDF5"
    BAM = "bam"
    CRAM = "cram"
    COMPLETE_GENOMICS_NATIVE = "CompleteGenomics_native"
    OXFORD_NANOPORE_NATIVE = "OxfordNanopore_native"


class FileQualityEncoding(Enum):
    """
    :cvar ASCII: ASCII character based encoding.
    :cvar DECIMAL: Single decimal value per quality score.
    :cvar HEXADECIMAL: Single hexadecimal value per quality score.
    """
    ASCII = "ascii"
    DECIMAL = "decimal"
    HEXADECIMAL = "hexadecimal"


class FileQualityScoringSystem(Enum):
    """
    :cvar PHRED: The quality score is expressed as a probability of
        error in log form: -10 log(1/p) where p is the probability of
        error, with value range 0..63, 0 meaning no base call.
    :cvar LOG_ODDS: The quality score is expressed as the ratio of error
        to non-error in log form: -10 log(p/(1-p)) where p is the
        probability of error, with value range -40..40. The SRA will
        convert these into phred scale during loadtime.
    """
    PHRED = "phred"
    LOG_ODDS = "log-odds"


@dataclass
class RunType(ObjectType):
    """
    A run contains a group of reads generated for a particular experiment.

    :ivar title: Short text that can be used to define submissions in
        searches or in displays.
    :ivar experiment_ref: Identifies the parent experiment.
    :ivar spot_descriptor:
    :ivar platform:
    :ivar processing:
    :ivar run_type: The type of the run.
    :ivar data_block:
    :ivar run_links: Links to resources related to this RUN or RUN set
        (publication, datasets, online databases).
    :ivar run_attributes: Properties and attributes of a RUN.  These can
        be entered as free-form tag-value pairs. For certain studies,
        submitters may be asked to follow a community established
        ontology when describing the work.
    :ivar run_date: ISO date when the run took place.
    :ivar run_center: If applicable, the name of the contract sequencing
        center that executed the run. Example: 454MSC.
    """
    title: Optional[str] = field(
        default=None,
        metadata={
            "name": "TITLE",
            "type": "Element",
            "namespace": "",
        }
    )
    experiment_ref: Optional[RefObjectType] = field(
        default=None,
        metadata={
            "name": "EXPERIMENT_REF",
            "type": "Element",
            "namespace": "",
            "required": True,
        }
    )
    spot_descriptor: Optional[SpotDescriptorType] = field(
        default=None,
        metadata={
            "name": "SPOT_DESCRIPTOR",
            "type": "Element",
            "namespace": "",
        }
    )
    platform: Optional[PlatformType] = field(
        default=None,
        metadata={
            "name": "PLATFORM",
            "type": "Element",
            "namespace": "",
        }
    )
    processing: Optional[ProcessingType] = field(
        default=None,
        metadata={
            "name": "PROCESSING",
            "type": "Element",
            "namespace": "",
        }
    )
    run_type: Optional["RunType.RunType"] = field(
        default=None,
        metadata={
            "name": "RUN_TYPE",
            "type": "Element",
            "namespace": "",
        }
    )
    data_block: Optional["RunType.DataBlock"] = field(
        default=None,
        metadata={
            "name": "DATA_BLOCK",
            "type": "Element",
            "namespace": "",
        }
    )
    run_links: Optional["RunType.RunLinks"] = field(
        default=None,
        metadata={
            "name": "RUN_LINKS",
            "type": "Element",
            "namespace": "",
        }
    )
    run_attributes: Optional["RunType.RunAttributes"] = field(
        default=None,
        metadata={
            "name": "RUN_ATTRIBUTES",
            "type": "Element",
            "namespace": "",
        }
    )
    run_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    run_center: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class RunType:
        reference_alignment: Optional[ReferenceSequenceType] = field(
            default=None,
            metadata={
                "name": "REFERENCE_ALIGNMENT",
                "type": "Element",
                "namespace": "",
            }
        )

    @dataclass
    class RunLinks:
        run_link: List[LinkType] = field(
            default_factory=list,
            metadata={
                "name": "RUN_LINK",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            }
        )

    @dataclass
    class RunAttributes:
        run_attribute: List[AttributeType] = field(
            default_factory=list,
            metadata={
                "name": "RUN_ATTRIBUTE",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            }
        )

    @dataclass
    class DataBlock:
        """
        :ivar files: Data files associated with the run.
        :ivar member_name: Allow for an individual DATA_BLOCK to be
            associated with a member of a sample pool.
        """
        files: Optional["RunType.DataBlock.Files"] = field(
            default=None,
            metadata={
                "name": "FILES",
                "type": "Element",
                "namespace": "",
                "required": True,
            }
        )
        member_name: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            }
        )

        @dataclass
        class Files:
            file: List["RunType.DataBlock.Files.File"] = field(
                default_factory=list,
                metadata={
                    "name": "FILE",
                    "type": "Element",
                    "namespace": "",
                    "min_occurs": 1,
                }
            )

            @dataclass
            class File:
                """
                :ivar read_label: The READ_LABEL can associate a certain
                    file to a certain read_label defined in the
                    SPOT_DESCRIPTOR.
                :ivar read_type:
                :ivar filename: The name or relative pathname of a run
                    data file.
                :ivar filetype: The run data file model.
                :ivar quality_scoring_system: How the input data are
                    scored for quality.
                :ivar quality_encoding: Character used in representing
                    the minimum quality value. Helps specify how to
                    decode text rendering of quality data.
                :ivar ascii_offset: Character used in representing the
                    minimum quality value.  Helps specify how to decode
                    text rendering of quality data.
                :ivar checksum_method: Checksum method used.
                :ivar checksum: Checksum of uncompressed file.
                :ivar unencrypted_checksum: Checksum of unenrypted
                    file(used in conjunction with checksum of encrypted
                    file).
                """
                read_label: List[str] = field(
                    default_factory=list,
                    metadata={
                        "name": "READ_LABEL",
                        "type": "Element",
                        "namespace": "",
                    }
                )
                read_type: List[FileReadType] = field(
                    default_factory=list,
                    metadata={
                        "name": "READ_TYPE",
                        "type": "Element",
                        "namespace": "",
                    }
                )
                filename: Optional[str] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "required": True,
                    }
                )
                filetype: Optional[FileFiletype] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "required": True,
                    }
                )
                quality_scoring_system: Optional[FileQualityScoringSystem] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                    }
                )
                quality_encoding: Optional[FileQualityEncoding] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                    }
                )
                ascii_offset: Optional[FileAsciiOffset] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                    }
                )
                checksum_method: Optional[FileChecksumMethod] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "required": True,
                    }
                )
                checksum: Optional[str] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                        "required": True,
                    }
                )
                unencrypted_checksum: Optional[str] = field(
                    default=None,
                    metadata={
                        "type": "Attribute",
                    }
                )


@dataclass
class Run(RunType):
    class Meta:
        name = "RUN"


@dataclass
class RunSetType:
    run: List[RunType] = field(
        default_factory=list,
        metadata={
            "name": "RUN",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
        }
    )


@dataclass
class RunSet(RunSetType):
    """
    RUN_SET serves as a container for a set of runs and a name space for
    establishing referential integrity between them.
    """
    class Meta:
        name = "RUN_SET"
